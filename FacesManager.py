import base64
from datetime import datetime , timedelta
import io
import random
import tensorflow as tf
import tflearn
from tflearn.layers.conv import conv_2d, max_pool_2d
from tflearn.layers.core import input_data, dropout, fully_connected
from tflearn.layers.estimator import regression
import cv2
import numpy as np
from PIL import Image
import os
import firebase_admin
from firebase_admin import credentials
from firebase_admin import db
from time import time , ctime
import nest_asyncio
import asyncio
import requests
from Models.Suspect import Suspect
from Models.Detection import Detection

from keras.layers import Dropout, Conv2D, MaxPool2D, Flatten, Dense ,Activation , Input
from keras.models import Sequential
import keras
nest_asyncio.apply()

from FaceDetector import FaceDetector


class FirebaseConector:
    cred = credentials.Certificate("face-recognition-1db25-firebase-adminsdk-4hcad-0373abc513.json")
    latest_detections=[]
    
    def connect(self):
        if not firebase_admin._apps:
            default_app = firebase_admin.initialize_app(self.cred, {
                'databaseURL':"https://face-recognition-1db25-default-rtdb.firebaseio.com/"
                })
    
    async def set_in_firebase(self,id):
        matching_detections=[]
        if len(self.latest_detections)!=0:
            matching_detections=[x for x in self.latest_detections if x.Id == id]
        
        if len(matching_detections) != 0 :
            
                if datetime.now() - matching_detections[len(matching_detections)-1].Time < timedelta(seconds=10):
                    return 0
        self.latest_detections.append( Detection(id,datetime.now()))
        
        ref = db.reference("/face detected")
        ref.push().set(
                        {
                            "name" : id,
                            "time" : ctime(time()),
                            "location" : "Main Hall",
                            "image" : self.getImage(id)
                        }
                    )
    def getImage(self,id):
        if(id=='iheb'):
            return ""
        
        else:
            return ""
        
class FacesManager:
    connector:FirebaseConector
    recognizer:any
    detector:FaceDetector
    #wantedFaces=[]
    suspects =[]
    loop:any
    
    def buildModel(self):
       
        model = Sequential()
    
        model.add(Conv2D(64,
                        (3,3),
                        padding="valid",
                        activation="relu",
                        input_shape=(50,50,1)))
        model.add(Conv2D(64,
                        (3,3),
                        padding="valid",
                        activation="relu",
                        input_shape=(50,50,1)))
        
        model.add(MaxPool2D(pool_size=(2, 2)))
        
        model.add(Conv2D(128,
                        (3,3),
                        padding="valid",
                        activation="relu"))
        model.add(Conv2D(128,
                        (3,3),
                        padding="valid",
                        activation="relu"))
        model.add(MaxPool2D(pool_size=(2, 2)))
        
        model.add(Flatten())
        
        model.add(Dense(128, activation="relu"))
        model.add(Dense(64, activation="relu"))
        model.add(Dense(3))  # equal to number of classes
        model.add(Activation("softmax"))
        
      
        
        model.compile(optimizer='adam', 
                    loss='categorical_crossentropy',
                    metrics = ['accuracy'])

        return model
        
        
        
    def __init__(self) -> None:
        self.connector=FirebaseConector()
        self.connector.connect()
        self.detector = FaceDetector()
     
        #self.RetrieveSuspects()
        self.recognizer = self.buildModel()
        #self.recognizer.load('trainer2/the_model.model')
        self.recognizer=keras.models.load_model('trainer2/the_model.model')
        self.loop = asyncio.get_event_loop()
        
        
    def AddAsWanted(self):
        
        cam = cv2.VideoCapture(0)
        cam.set(3, 640) # set video width
        cam.set(4, 480) # set video height
        try:
            

            # For each person, enter one numeric face id
            face_id = input('\n enter user id end press <return> ==>  ')

            print("\n [INFO] Initializing face capture. Look the camera and wait ...")
            # Initialize individual sampling face count
            count = 0

            while(True):

                ret, img = cam.read()
                #img = cv2.flip(img, -1) # flip video image vertically
                gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
                img , bboxs = self.detector.findFaces(img)
                for increment in range(len(bboxs)):
                        
                        
                    (x,y,w,h) = bboxs[increment][1] 

                

                    cv2.rectangle(img, (x,y), (x+w,y+h), (255,0,0), 2)     
                    count += 1

                    # Save the captured image into the datasets folder
                    cv2.imwrite("dataset/User." + str(face_id) + '.' + str(count) + ".jpg", gray[y:y+h,x:x+w])

                    cv2.imshow('image', img)

                k = cv2.waitKey(100) & 0xff # Press 'ESC' for exiting video
                if k == 27:
                    break
                elif count >= 499: # Take 30 face sample and stop video
                    break

        finally:
            # Do a bit of cleanup
            print("\n [INFO] Exiting Program and cleanup stuff")
            cam.release()
            cv2.destroyAllWindows()
    def getImagesAndLabels(self,path):

        imagePaths = [os.path.join(path,f) for f in os.listdir(path)]     
        faceSamples=[]
        ids = []
        usernames=[]
        data=[]
        for imagePath in imagePaths:
            current_user=os.path.split(imagePath)[-1].split(".")[1]
            
            if(current_user not in usernames):
                usernames.append(current_user)
                
            id =usernames.index(current_user)
            
            
            PIL_img =  cv2.imread(imagePath, cv2.IMREAD_GRAYSCALE) # convert it to grayscale
            PIL_img=cv2.resize(PIL_img, (50,50))
            img_numpy = np.array(PIL_img)
            
            
            data.append([img_numpy,id])
            

        return data
    
    
    def TrainModel(self):
        
        model = self.buildModel()
        data= self.getImagesAndLabels('dataset')
        random.shuffle(data)
        data70 = 3* int(len(data)/4)
        train = data
        test = data[data70:]
        X_train = np.array([i[0] for i in train]).reshape(-1,50,50,1)

    
        y_train = [i[1] for i in train]
        X_test = np.array([i[0] for i in test]).reshape(-1,50,50,1)

        y_test = [i[1] for i in test]

        y_train = tf.keras.utils.to_categorical(y_train)
        y_test = tf.keras.utils.to_categorical(y_test)

        model.fit(X_train, 
                    y_train,
                    epochs=96,
                    batch_size=64,
                    validation_split=0.25   # 25% of train dataset will be used as validation set
                    )
        model.save("trainer2/the_model.model")
    

    
    async def StartCheckFace(self):
        try:

            
            font = cv2.FONT_HERSHEY_SIMPLEX

            #iniciate id counter
            i = 0

            # names related to ids: example ==> Marcelo: id=1,  etc
            names = ['None','iheb','unknown'] 

            # Initialize and start realtime video capture
            cam = cv2.VideoCapture(0)
            cam.set(3, 640) # set video widht
            cam.set(4, 480) # set video height

            # Define min window size to be recognized as a face
            minW = 0.1*cam.get(3)
            minH = 0.1*cam.get(4)

            while True:

                ret, img =cam.read()
                #img = cv2.flip(img, -1) # Flip vertically
                

                img, bboxs = self.detector.findFaces(img)
                gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
                
                for increment in range(len(bboxs)):
                        
                        
                        (x,y,w,h) = bboxs[increment][1] 
                        try:
                            exact_face=gray[y:y+h, x:x+w]  
                            resized_face=cv2.resize(exact_face,(50,50))
                        except Exception as e:
                            continue
                           
                        
                        i = self.recognizer.predict(resized_face.reshape(1, 50, 50, 1))
                        reconConfidence=np.max(i)
                        if(reconConfidence <0.69):
                            id=names[3]
                        else:
                            id=names[np.argmax(i)+1]
                        confience = int(bboxs[increment][2][0])*100
                        # Check if confience is less them 100 ==> "0" is perfect match 
                   
                        #id = names[int(i)]
                        confience = "  {0}%".format(round(100 - confience))
                        
                        #if id != 'unknown' and id !='None' :
                            #asyncio.run(self.connector.set_in_firebase(id))

                 
                        cv2.putText(img, f'{int(reconConfidence * 100)}%',
                (x, y - 20), cv2.FONT_HERSHEY_PLAIN,2, (255, 0, 255), 2)
                        cv2.putText(img, id, (x+5,y+h+20), font, 1, (255,255,255), 2)
                    
                cv2.imshow('camera',img) 
                        
                k = cv2.waitKey(10) & 0xff # Press 'ESC' for exiting video
                if k == 27:
                    break
        finally:
            # Do a bit of cleanup
            print("\n [INFO] Exiting Program and cleanup stuff")
            cam.release()
            cv2.destroyAllWindows()

    def StartFaceReconAsync(self):
        
        task = asyncio.ensure_future(self.StartCheckFace())
        self.loop.run_until_complete(task)
            
    def RetrieveSuspects(self):
        self.suspects=[]
        suspectsReq =requests.get('https://localhost:5001/api/Police/suspects',verify=False)
        suspectsJson=suspectsReq.json()
        for jsonSus in suspectsJson:
            self.suspects.append(Suspect(jsonSus['id'],jsonSus['name'],jsonSus['location'],jsonSus['image']))

    
    def RetrieveSuspectsPhotos(self):
        """
        http req to get suspects
        for sus in suspects:
        http req (sus.id)
        save photos to dataset directory
        """
        
        self.RetrieveSuspects()
        for suspect in self.suspects:    
            r =requests.get('https://localhost:5001/api/Police/photos/'+suspect.Id,verify=False)
            res=r.json()
            a=1
            for i in res:
                b=base64.b64decode(i)
                image = Image.open(io.BytesIO(b))
                image.save('dataset/User.'+suspect.Id+'.'+str(a)+'.jpg')
                a+=1

